# -*- coding: utf-8 -*-
"""Street Tree Census.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TGK2b5N4R6TGfWEelFlgJbnSNLoRVE-K
"""

import pandas as pd
import numpy as np

#data source: https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/uvpi-gqnh

pd.set_option('display.max_columns', None)
#pd.set_option('display.max_rows', None)

dataset = pd.read_csv("2015_Street_Tree_Census_-_Tree_Data.csv")
dataset

dataset.dtypes

dataset['tree_id'] = dataset['tree_id'].astype(str)
dataset['block_id'] = dataset['block_id'].astype(str)

dataset.dtypes

dataset.columns

dataset_subset = dataset[['tree_id', 'block_id', 'created_at', 'tree_dbh', 'stump_diam',
       'curb_loc', 'status', 'health', 'spc_latin', 'spc_common', 'steward',
       'guards', 'sidewalk', 'user_type', 'problems']]
dataset_subset

#checking null value
dataset_subset.isna().sum()

dataset_subset.dtypes

dataset_subset[dataset_subset['health'].isna()]
#31616 rows

dataset_subset['status'].value_counts()

dataset_subset[(dataset_subset['status']=='Stump') | (dataset_subset['status']=='Dead')]
#31615 rows

stump_dead =((dataset_subset['status']=='Stump') | (dataset_subset['status']=='Dead'))
stump_dead

dataset_subset.loc[stump_dead, 'health'].isna().sum()
#31615 out of 31616, high correlation

dataset_subset.loc[stump_dead, 'spc_latin'].isna().sum()
#31614 out of 31619, high correlation

#In conclusion, theres a high correlation between 'status' column and other columns with high missing value

no_record_dead = dataset_subset[['spc_latin', 'spc_common', 'steward', 'guards', 'sidewalk']].columns
no_record_dead

dataset_subset.loc[stump_dead, no_record_dead] = dataset_subset.loc[stump_dead, no_record_dead].fillna('Not Recorded')
dataset_subset.loc[stump_dead, no_record_dead]
#according to the source, the dead tree is 'Not Recorded' in the following columns

dataset_subset.loc[stump_dead, ['health','problems']] = dataset_subset.loc[stump_dead, ['health','problems']].fillna('None')
dataset_subset.loc[stump_dead, ['health','problems']]

dataset_subset.isna().sum()
#the rest can be filled with the most value counts

most_health = dataset_subset['health'].value_counts().index[0]
most_spc_latin = dataset_subset['spc_latin'].value_counts().index[0]
most_spc_common = dataset_subset['spc_common'].value_counts().index[0]
most_guards = dataset_subset['guards'].value_counts().index[0]
most_sidewalk = dataset_subset['sidewalk'].value_counts().index[0]
most_problems = dataset_subset['problems'].value_counts().index[0]
most_steward = dataset_subset['steward'].value_counts().index[0]
most_user_type = dataset_subset['user_type'].value_counts().index[0]

dataset_subset['health'] = dataset_subset['health'].fillna(most_health)
dataset_subset['spc_latin'] = dataset_subset['spc_latin'].fillna(most_spc_latin)
dataset_subset['spc_common'] = dataset_subset['spc_common'].fillna(most_spc_common)
dataset_subset['guards'] = dataset_subset['guards'].fillna(most_guards)
dataset_subset['sidewalk'] = dataset_subset['sidewalk'].fillna(most_sidewalk)
dataset_subset['problems'] = dataset_subset['problems'].fillna(most_problems)
dataset_subset['steward'] = dataset_subset['steward'].fillna(most_steward)
dataset_subset['user_type'] = dataset_subset['user_type'].fillna(most_user_type)

dataset_subset.isna().sum()
#CLEAR! No missing values!

dataset_subset[((dataset_subset['status']=='Stump') | (dataset_subset['status']=='Dead'))
                & (dataset_subset['tree_dbh']>0)]

#Cheking outliers
dataset_subset.hist(bins=10, figsize=(20,10))

big_tree = dataset_subset[dataset_subset['tree_dbh']>50]
big_tree

big_tree.plot.scatter(x='tree_id', y='tree_dbh', figsize=(20,15))
#some tree sizes are too big

dataset_subset.groupby('spc_latin').mean()

tree_alive = dataset_subset[dataset_subset['status']=='Alive']
tree_alive

tree_dead_stump = dataset_subset[(dataset['status']=='Dead') | (dataset['status']=='Stump') ]
tree_dead_stump

alive_subset = tree_alive.groupby('spc_latin')['tree_dbh'].describe().reset_index()[['spc_latin','25%','75%']]
alive_subset.rename(columns={'25%':'25%_dbh', '75%':'75%_dbh'}, inplace=True)
alive_subset

dead_stump_subset = tree_dead_stump.groupby('spc_latin')['stump_diam'].describe().reset_index()[['spc_latin','25%','75%']]
dead_stump_subset.rename(columns={'25%':'25%_stump', '75%':'75%_stump'}, inplace=True)
dead_stump_subset
#since most of stump species is not recorded, this data is insignificant

street_tree_census = dataset_subset.merge(alive_subset, left_on='spc_latin', right_on='spc_latin')
street_tree_census

low_limit = street_tree_census['tree_dbh'] < street_tree_census['25%_dbh']
high_limit = street_tree_census['tree_dbh'] > street_tree_census['75%_dbh']

street_tree_census.loc[low_limit, 'tree_dbh'] = street_tree_census['25%_dbh']

street_tree_census.loc[high_limit, 'tree_dbh'] = street_tree_census['75%_dbh']

street_tree_census.hist(bins=20, figsize=(20,10))
#the distribution seems right!